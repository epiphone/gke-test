version: 2.1

commands:
  deploy:
    description: Build and push docker image, update infra and kubernetes application
    parameters:
      gcloud_service_key:
        type: env_var_name
      google_project_id:
        type: env_var_name
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache docker gettext
            apk add --no-cache --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community terraform=0.11.11
            gcloud components install kubectl
            wget https://github.com/garethr/kubeval/releases/download/0.7.3/kubeval-linux-amd64.tar.gz
            tar xzvf kubeval-linux-amd64.tar.gz
            chmod u+x kubeval
      - run:
          name: Authenticate Google Cloud client
          command: |
            echo ${<< parameters.gcloud_service_key >>} > /tmp/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=/tmp/gcloud-service-key.json
            gcloud --quiet config set project ${<< parameters.google_project_id >>}
      - run:
          name: Persist app image tag to make it available for later steps
          command: echo eu.gcr.io/${<< parameters.google_project_id >>}/gke-app:${CIRCLE_SHA1} > /tmp/app_image
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            cd app
            docker build \
              --build-arg COMMIT_REF=${CIRCLE_SHA1} \
              --build-arg BUILD_DATE=`date -u +”%Y-%m-%dT%H:%M:%SZ”` \
              -t `cat /tmp/app_image` .
      - run:
          name: Push image to Google Container Registry
          command: |
            gcloud auth configure-docker
            docker push `cat /tmp/app_image`
      - run:
          name: Initialize && validate Terraform
          command: |
            cd terraform/${ENV}
            export GOOGLE_APPLICATION_CREDENTIALS='/tmp/gcloud-service-key.json'
            terraform init -input=false
            terraform validate
      - run:
          name: Apply Terraform update
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS='/tmp/gcloud-service-key.json'
            cd terraform/${ENV}
            terraform plan -out=/tmp/tfplan -input=false
            terraform apply -input=false -auto-approve /tmp/tfplan
      - run:
          name: Populate Kubernetes declaration with parameters and lint
          command: |
            PROJECT_NAME=gke-${ENV} APP_IMAGE=`cat /tmp/app_image` envsubst < k8s/k8s.yml > k8s_filled.yml
            ./kubeval k8s_filled.yml
      - run:
          name: Authenticate kubectl
          command: gcloud container clusters get-credentials $(terraform output cluster_name) --zone $(terraform output cluster_zone)
      - run:
          name: Apply kubectl
          command: kubectl apply -f k8s_filled.yml && kubectl rollout status deployment/gke-${ENV}
      - store_artifacts:
          path: /tmp/app_image
      - store_artifacts:
          path: /tmp/tfplan

jobs:
  test:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "app/yarn.lock" }}
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: cd app && yarn install
      - save_cache:
          paths:
            - app/node_modules
          key: v1-dependencies-{{ checksum "app/yarn.lock" }}
      - run:
          name: Run tests
          command: cd app && yarn test

  deploy-dev:
    docker:
      - image: google/cloud-sdk:alpine
    environment:
      ENV: dev
      TF_IN_AUTOMATION: "true"
    steps:
      - deploy:
          gcloud_service_key: GCLOUD_SERVICE_KEY_DEV
          google_project_id: GOOGLE_PROJECT_ID_DEV

  deploy-test:
    docker:
      - image: google/cloud-sdk:alpine
    environment:
      ENV: test
      TF_IN_AUTOMATION: "true"
    steps:
      - deploy:
          gcloud_service_key: GCLOUD_SERVICE_KEY_TEST
          google_project_id: GOOGLE_PROJECT_ID_TEST

  deploy-prod:
    docker:
      - image: google/cloud-sdk:alpine
    environment:
      ENV: prod
      TF_IN_AUTOMATION: "true"
    steps:
      - deploy:
          gcloud_service_key: GCLOUD_SERVICE_KEY_PROD
          google_project_id: GOOGLE_PROJECT_ID_PROD

workflows:
  test-build-deploy:
    jobs:
      - test

      # Push to any non-master branch triggers deployment to `dev` environment:
      - deploy-dev:
          requires:
            - test
          filters:
            branches:
              ignore:
                - master

      # Push to master branch triggers deployment to `test` environment:
      # - deploy-test:
      #     requires:
      #       - test
      #     filters:
      #       branches:
      #         only: master

      # Push to master branch triggers deployment to `production` environment, with a further manual approval step in CircleCI UI:
      # - deploy-prod:
      #     requires:
      #       - test
      #     filters:
      #       branches:
      #         only: master
      #     type: approval
