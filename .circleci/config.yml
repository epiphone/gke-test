version: 2.1

commands:
  build-and-push-image:
    description: "Build Docker image, push to Google Container Registry"
    parameters:
      gcloud_service_key:
        type: env_var_name
      google_project_id:
        type: env_var_name
    steps:
      - run: apk add docker
      - run:
          name: Authenticate Google Cloud client
          command: |
            echo ${<< parameters.gcloud_service_key >>} > /tmp/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=/tmp/gcloud-service-key.json
            gcloud --quiet config set project ${<< parameters.google_project_id >>}
      - setup_remote_docker
      - checkout
      - run:
          name: Persist app image tag to make it available for later jobs
          command: echo eu.gcr.io/${<< parameters.google_project_id >>}/gke-app:${CIRCLE_SHA1} > /tmp/app_image_tag
      - run:
          name: Build Docker image
          command: |
            cd app
            docker build \
              --build-arg COMMIT_REF=${CIRCLE_SHA1} \
              --build-arg BUILD_DATE=`date -u +”%Y-%m-%dT%H:%M:%SZ”` \
              -t `cat /tmp/app_image_tag` .
      - run:
          name: Push image to Google Container Registry
          command: |
            gcloud auth configure-docker
            docker push `cat /tmp/app_image_tag`
      - persist_to_workspace:
          root: /tmp
          paths:
            - app_image_tag
            - gcloud-service-key.json

  apply-terraform:
    description: "Update infra to match Terraform spec"
    parameters:
      environment:
        type: enum
        enum: ["dev", "test", "prod"]
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Check whether app_image_tag was passed over from previous (image build) job
          command: |
            if ! [ -s /tmp/app_image_tag ]
            then
              echo " app_image_tag not specified "; exit 1
            fi
      - run:
          name: Initialize Terraform
          command: |
            export TF_IN_AUTOMATION=true
            export TF_VAR_app_image_tag=`cat /tmp/app_image_tag`
            export GOOGLE_APPLICATION_CREDENTIALS='/tmp/gcloud-service-key.json'
            cd terraform/<< parameters.environment >> && echo 'Updating infra at ' `pwd` && cat /tmp/gcloud-service-key.json
            terraform init -input=false
      - run:
          name: Validate Terraform
          command: terraform validate
      - run:
          name: Apply Terraform update
          command: |
            terraform plan -out=tfplan -input=false
            terraform show tfplan
            terraform apply -input=false -auto-approve tfplan

jobs:
  test:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "app/yarn.lock" }}
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: cd app && yarn install
      - save_cache:
          paths:
            - app/node_modules
          key: v1-dependencies-{{ checksum "app/yarn.lock" }}
      - run:
          name: Run tests
          command: cd app && yarn test

  build-and-push-image-dev:
    docker:
      - image: google/cloud-sdk:alpine
    steps:
      - build-and-push-image:
          gcloud_service_key: GCLOUD_SERVICE_KEY_DEV
          google_project_id: GOOGLE_PROJECT_ID_DEV

  deploy-dev:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - apply-terraform:
          environment: "dev"

  build-and-push-image-test:
    docker:
      - image: google/cloud-sdk:alpine
    steps:
      - build-and-push-image:
          gcloud_service_key: GCLOUD_SERVICE_KEY_TEST
          google_project_id: GOOGLE_PROJECT_ID_TEST

  deploy-test:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - apply-terraform:
          environment: "test"

  build-and-push-image-prod:
    docker:
      - image: google/cloud-sdk:alpine
    steps:
      - build-and-push-image:
          gcloud_service_key: GCLOUD_SERVICE_KEY_PROD
          google_project_id: GOOGLE_PROJECT_ID_PROD

  deploy-prod:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - apply-terraform:
          environment: "prod"

workflows:
  test-build-deploy:
    jobs:
      - test

      # Push to any non-master branche triggers deployment to `dev` environment:
      - build-and-push-image-dev:
          requires:
            - test
          filters:
            branches:
              ignore:
                - master
      - deploy-dev:
          requires:
            - build-and-push-image-dev
          filters:
            branches:
              ignore:
                - master

      # Push to master branch triggers deployment to `test` environment:
      - build-and-push-image-test:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy-test:
          requires:
            - build-and-push-image-test
          filters:
            branches:
              only: master

      # Push to master branch triggers deployment to `production` environment, with a further manual approval step in CircleCI UI:
      # - build-and-push-image-prod: TODO use image built in test stage
      #     requires:
      #       - test
      #     filters:
      #       branches:
      #         only: master
      # - deploy-prod:
      #     requires:
      #       - build-and-push-image-prod
      #     filters:
      #       branches:
      #         only: master
      #     type: approval
